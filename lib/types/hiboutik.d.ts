/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/action_links": {
        /** Returns action links/buttons<br />Scope for public applications : none */
        get: operations["api.action_links.get"];
    };
    "/action_links/": {
        /** Add an action link/button */
        post: operations["api.action_links.add"];
    };
    "/action_link_exec/": {
        /** Execute an action link/button */
        post: operations["api.action_links.exec"];
    };
    "/action_links/{action_link_id}": {
        /** Delete action_link_id. */
        delete: operations["api.action_links.delete"];
    };
    "/brands": {
        /** Returns brands by ID (ORDER BY brand_id DESC)<br />Scope for public applications : read_products<br />Results per page : 250 */
        get: operations["api.brands.index"];
        /** Update a brand<br />Scope for public applications : write_products */
        put: operations["api.brands.update"];
        /** Create a new brand<br />Scope for public applications : write_products */
        post: operations["api.brands.add"];
    };
    "/calendar/events/{store_id}/{year}/{month}/{day}": {
        /** Returns calendar events for store_id for a specific day<br />Scope for public applications : read_calendar_events */
        get: operations["api.calendar.index"];
    };
    "/calendar/event/{event_id}": {
        /** Returns calendar event_id<br />Scope for public applications : read_calendar_events */
        get: operations["api.calendar.event_id.index"];
    };
    "/calendar/events/": {
        /** Add a calendar event<br />Scope for public applications : write_calendar_events */
        post: operations["api.calendar.add_event"];
    };
    "/calendar/events/{id}/": {
        /** Delete a calendar event<br />Scope for public applications : write_calendar_events */
        delete: operations["api.calendar.delete_event"];
    };
    "/categories": {
        /** Returns categories by ID (ORDER BY category_id DESC)<br />Scope for public applications : read_products<br />Results per page : 250 */
        get: operations["api.categories.index"];
        /** Update a category<br />Scope for public applications : write_products */
        put: operations["api.categories.update"];
        /** Create a new category<br />Scope for public applications : write_products */
        post: operations["api.categories.add"];
    };
    "/credit_notes/{store_id}": {
        /** Returns pending credit notes in a store_id<br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.credit_notes.index"];
    };
    "/customers/": {
        /** Returns customers by ID (ORDER BY customers_id DESC)<br />Scope for public applications : read_customers<br />Results per page : 250 */
        get: operations["api.customers.index"];
        /** Create a new customer<br />Scope for public applications : write_customers */
        post: operations["api.customers.add"];
    };
    "/customers_birthday/{month}/{day}": {
        /** Returns customers born on a specific day<br />Scope for public applications : read_customers */
        get: operations["api.customers_birthday.index"];
    };
    "/customers/lists/": {
        /** Returns customers lists (ORDER BY list_id DESC)<br />Scope for public applications : read_customers<br />Results per page : 250 */
        get: operations["api.customers_lists.index"];
    };
    "/customers/lists/{list_id}": {
        /** Returns customers from a specific list<br />Scope for public applications : read_customers<br />Results per page : 250 */
        get: operations["api.customers_lists.list_id.search"];
    };
    "/number_of_customers": {
        /** Set number of customers in shop_id at date<br />Scope for public applications : write_reports */
        post: operations["api.customers.set_number"];
    };
    "/customers_addresses/{address_id}": {
        /** Returns details of a customer address<br />Scope for public applications : read_customers */
        get: operations["api.customers_addresses.address_id"];
        /** Delete a customer address<br />Scope for public applications : write_customers */
        delete: operations["api.customers_addresses.delete"];
    };
    "/customers_addresses": {
        /** Add a customer address<br />Scope for public applications : write_customers */
        post: operations["api.customers_addresses.add"];
    };
    "/customers_addresses/{address_id}/": {
        /** Update a customer address<br />Scope for public applications : write_customers */
        put: operations["api.customers_addresses.update"];
    };
    "/customer/{customers_id}": {
        /** Returns details of a customers_id<br />Scope for public applications : read_customers */
        get: operations["api.customer.customers_id"];
        /** Delete a customer<br />Scope for public applications : write_customers */
        delete: operations["api.customer.delete"];
    };
    "/customer/{customers_id}/products_solds/": {
        /** Returns products sold to a specific customers_id (ORDER BY sale_id DESC)<br />Scope for public applications : read_customers<br />Results per page : 250 */
        get: operations["api.customer.customers_id.products_solds"];
    };
    "/customer/{customers_id}/": {
        /** Update a customer<br />Scope for public applications : write_customers */
        put: operations["api.customer.update"];
    };
    "/customers_credit/{customers_id}": {
        /** Returns store credit lines for a customers_id<br />Scope for public applications : read_store_credit<br />Results per page : 250 */
        get: operations["api.customers_credit.customers_id"];
    };
    "/customers_credit/": {
        /** Add a store credit line to a customers_id<br />Scope for public applications : write_store_credit */
        post: operations["api.customers_credit.add_line"];
    };
    "/tags/customers/": {
        /** Returns tags for customers<br />Scope for public applications : read_customers */
        get: operations["api.tags.customers"];
    };
    "/customers_tags/{customer_id}": {
        /** Returns tags for a specific customer_id<br />Scope for public applications : read_customers */
        get: operations["api.tags.customer_id"];
        /** Add a tag to a specific customer_id<br />Scope for public applications : write_customers */
        post: operations["api.customers_tags.add"];
    };
    "/customers_tags/{customer_id}/{tag_id}": {
        /** Delete a tag to a specific customer_id<br />Scope for public applications : write_customers */
        delete: operations["api.customers_tags.delete"];
    };
    "/inventory_inputs/": {
        /** Returns the list of stock orders<br />Scope for public applications : read_inventory<br />Results per page : 250 */
        get: operations["api.inventory_inputs.index"];
        /** Create a stock order<br />Scope for public applications : write_inventory */
        post: operations["api.inventory_inputs.add"];
    };
    "/inventory_inputs/{inventory_input_id}": {
        /** Returns details of a stock order<br />Scope for public applications : read_inventory */
        get: operations["api.inventory_inputs_info.index"];
    };
    "/inventory_input_details/{inventory_input_id}": {
        /** Returns details for a stock order<br />Scope for public applications : read_inventory */
        get: operations["api.inventory_input_details.index"];
        /** Add a product line to a stock order<br />Scope for public applications : write_inventory */
        post: operations["api.inventory_input_details.add_product"];
    };
    "/inventory_input_details/{inventory_input_detail_id}/": {
        /** Update an inventory_input_detail_id<br />Scope for public applications : write_inventory */
        put: operations["api.inventory_input_detail_id.update"];
    };
    "/inventory_input_validate/": {
        /** Validate a stock order<br />Scope for public applications : write_inventory */
        post: operations["api.inventory_input.validate"];
    };
    "/inventory_inputs_on_hold/": {
        /** Returns the list of stock orders details on hold<br />Scope for public applications : read_inventory<br />Results per page : 250 */
        get: operations["api.inventory_inputs_on_hold.index"];
    };
    "/kitchen/open_tables": {
        /** Returns pending sales sent to kitchen<br />Scope for public applications : read_kitchen_screen */
        get: operations["api.kitchen.open_tables"];
    };
    "/kitchen/cooking_stations": {
        /** Returns cooking stations<br />Scope for public applications : read_kitchen_screen */
        get: operations["api.kitchen.cooking_stations"];
    };
    "/kitchen/sales/{sale_id}": {
        /** Returns sale details<br />Scope for public applications : read_kitchen_screen */
        get: operations["api.kitchen.sale_details"];
    };
    "/kitchen/line_item": {
        /** Add item to the kitchen screen<br />Scope for public applications : write_kitchen_screen */
        post: operations["api.kitchen.add_line_item"];
    };
    "/kitchen/line_items": {
        /** Add item to the kitchen screen<br />Scope for public applications : write_kitchen_screen */
        post: operations["api.kitchen.add_line_items"];
    };
    "/kitchen/item_status": {
        /** Update item status<br />Scope for public applications : write_kitchen_screen */
        post: operations["api.kitchen.update_item_status"];
    };
    "/kitchen/sales/{sale_id}/": {
        /** Delete a sale from the kitchen screen<br />Scope for public applications : write_kitchen_screen */
        delete: operations["api.kitchen.delete_sale"];
    };
    "/message/": {
        /** Post a new message */
        post: operations["api.message.add"];
    };
    "/modifiers/": {
        /** Returns modifiers<br />Scope for public applications : read_products */
        get: operations["api.modifiers.index"];
        /** Create a modifier<br />Scope for public applications : write_products */
        post: operations["api.modifiers.add"];
    };
    "/modifiers/{modifier_id}/": {
        /** Update a modifier<br />Scope for public applications : write_products */
        put: operations["api.modifiers.update"];
    };
    "/payment_types/{store_id}/": {
        /** Returns payment types for store_id<br />Scope for public applications : read_settings */
        get: operations["api.payment_types.index"];
    };
    "/payments/due_date/{store_id}/": {
        /** Returns the list of payments with due dates for a specific store_id<br />Scope for public applications : read_sales<br />Results per page : 250 */
        get: operations["api.payments_due_date.index"];
    };
    "/prepaid_purchases/": {
        /** Returns prepaid purchases lines<br />Scope for public applications : read_customers<br />Results per page : 250 */
        get: operations["api.prepaid_purchases.index"];
        /** Add a prepaid purchase line to a customers_id<br />Scope for public applications : write_customers */
        post: operations["api.prepaid_purchases.add_line"];
    };
    "/prepaid_purchases/{customers_id}": {
        /** Returns prepaid purchases lines for a customers_id<br />Scope for public applications : read_customers<br />Results per page : 250 */
        get: operations["api.prepaid_purchases.customers_id"];
    };
    "/print/misc/": {
        /** Print a document<br />Scope for public applications : print<br /><br />In order to be able to print with this method you need to :<br />- On Hiboutik in 'General Settings' set the public IP address of your point of sale. You can use a DYN DNS service if you don't have a public static IP address. <br />- Set a port forwarding on you router from the port of your choice (the one you will fill below) to the port 9100 on your local printer */
        post: operations["api.print.misc"];
    };
    "/products/": {
        /** Returns products (default sorting is by ID DESC)<br />Scope for public applications : read_products<br />Results per page : 250 */
        get: operations["api.products.index"];
        /** Create a new product<br />Scope for public applications : write_products */
        post: operations["api.products.add"];
    };
    "/products_images/{product_id}/": {
        /** Add a product image<br />Scope for public applications : write_products */
        post: operations["api.products_images.add"];
    };
    "/products_images_1000x1000/{product_id}/": {
        /** Add a product image<br />Scope for public applications : write_products */
        post: operations["api.products_images_1000x1000.add"];
    };
    "/products_barcode/{store_id}/{product_id}/{size_id}/": {
        /** Returns product barcode for a store_id & product_id & size_id<br />Scope for public applications : read_products */
        get: operations["api.products_barcode.index"];
    };
    "/products_sold/{store_id}/{year}/{month}/{day}/": {
        /** Returns products sold in a store_id at a specific date<br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.products_sold.index"];
    };
    "/products_purchased/{warehouse_id}/{year}/{month}/{day}/": {
        /** Returns products purchased in a warehouse_id at a specific date<br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.products_purchased.index"];
    };
    "/products_returned/{store_id}/{year}/{month}/{day}": {
        /** Returns product returned for store_id for a specific day<br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.products_returned.index"];
    };
    "/product/{product_id}/": {
        /** Update a product<br />Scope for public applications : write_products */
        put: operations["api.product.update"];
    };
    "/products/{product_id}": {
        /** Returns product details<br />Scope for public applications : read_products */
        get: operations["api.products.id"];
    };
    "/products/search/name/{q}": {
        /** Returns products search results by name<br />Scope for public applications : read_products<br />Results per page : 250 */
        get: operations["api.products.name.search"];
    };
    "/products/search/barcode/{q}/": {
        /** Returns products search results by barcode<br />Scope for public applications : read_products */
        get: operations["api.products.barcode.search"];
    };
    "/products/search/supplier_reference/{q}/": {
        /** Returns products search results by supplier reference<br />Scope for public applications : read_products */
        get: operations["api.products.supplier_reference.search"];
    };
    "/products/search/category/{category_id}": {
        /** Returns products search results by category_id<br />Scope for public applications : read_products<br />Results per page : 250 */
        get: operations["api.products.category_id.search"];
    };
    "/products/search/taxes/{tax_id}": {
        /** Returns products search results by tax_id<br />Scope for public applications : read_products<br />Results per page : 250 */
        get: operations["api.products.tax_id.search"];
    };
    "/products/search/tags/{tag_id}": {
        /** Returns products search results by tag_id<br />Scope for public applications : read_products<br />Results per page : 250 */
        get: operations["api.products.tag_id.search"];
    };
    "/products/search/open_packages": {
        /** Returns open package products<br />Scope for public applications : read_products<br />Results per page : 250 */
        get: operations["api.products.open_packages.search"];
    };
    "/product_specific_rules/{shop_id}/{product_id}/{size_id}": {
        /** Delete a product specific rule<br />Scope for public applications : write_products */
        delete: operations["api.product_specific_rules.delete"];
    };
    "/products_modifiers/{product_id}": {
        /** Returns modifiers for a specific product_id<br />Scope for public applications : read_products */
        get: operations["api.modifiers.product_id"];
        /** Add a modifier to a specific product_id<br />Scope for public applications : write_products */
        post: operations["api.products_modifiers.add"];
    };
    "/products_modifiers/": {
        /** Returns modifiers products<br />Scope for public applications : read_products */
        get: operations["api.modifiers.products.index"];
    };
    "/products_modifiers/{product_id}/{modifier_id}": {
        /** Delete a modifier to a specific product_id<br />Scope for public applications : write_products */
        delete: operations["api.products_modifiers.delete"];
    };
    "/tags/products/": {
        /** Returns tags for products<br />Scope for public applications : read_products */
        get: operations["api.tags.products"];
    };
    "/products_tags/{product_id}": {
        /** Returns tags for a specific product_id<br />Scope for public applications : read_products */
        get: operations["api.tags.product_id"];
        /** Add a tag to a specific product_id<br />Scope for public applications : write_products */
        post: operations["api.products_tags.add"];
    };
    "/products_tags/": {
        /** Returns tags for products<br />Scope for public applications : read_products */
        get: operations["api.tags.products.index"];
    };
    "/products_tags/{product_id}/{tag_id}": {
        /** Delete a tag to a specific product_id<br />Scope for public applications : write_products */
        delete: operations["api.products_tags.delete"];
    };
    "/reset/": {
        /** Reset account<br />Scope for public applications : write_settings<br />Account must be in demo mode */
        post: operations["api.reset.misc"];
    };
    "/reset/customers/loyalty_points": {
        /** Reset loyalty points for customers_id<br />Scope for public applications : write_settings<br />Account must be in demo mode */
        post: operations["api.reset.customers.misc"];
    };
    "/rooms/": {
        /** Returns rooms by ID */
        get: operations["api.rooms.index"];
    };
    "/ressources/": {
        /** Returns ressources by ID */
        get: operations["api.ressources.index"];
    };
    "/ressources/{ressource_id}/": {
        /** Returns ressource details */
        get: operations["api.ressources.id"];
    };
    "/sales/comments/": {
        /** Add/Update comments<br />Scope for public applications : write_sales */
        post: operations["api.sales.comments.add"];
    };
    "/sales/": {
        /** Create a new sale<br />Scope for public applications : write_sales */
        post: operations["api.sales.add"];
    };
    "/sales/add_product/": {
        /** Add a product on a sale<br />Scope for public applications : write_sales */
        post: operations["api.sales.add_product"];
    };
    "/sales/add_credit_note/": {
        /** Add a credit note on a sale<br />Scope for public applications : write_sales */
        post: operations["api.sales.add_credit_note"];
    };
    "/sales/close/": {
        /** Close a sale<br />Scope for public applications : write_sales */
        post: operations["api.sales.close"];
    };
    "/sales_payment_div/": {
        /** Add a DIV payment to a sale<br />Scope for public applications : write_sales */
        post: operations["api.sales.payment_div"];
    };
    "/sales_payment_div/{payment_detail_id}/": {
        /** Update a DIV payment<br />Scope for public applications : write_sales */
        put: operations["api.sale.payment_div.update"];
    };
    "/sales_payment_div/{payment_detail_id}": {
        /** Delete DIV payment<br />Scope for public applications : write_sales */
        delete: operations["api.sales.payment_div.delete"];
    };
    "/sale/{sale_id}/": {
        /** Update a sale attribute<br />Scope for public applications : write_sales */
        put: operations["api.sale.update"];
    };
    "/sale/{sale_id}": {
        /** Delete sale. Sale must be empty and should not have any CREDIT like payments.<br />Scope for public applications : write_sales */
        delete: operations["api.sales.delete"];
    };
    "/sale_line_item/{line_item_id}": {
        /** Returns details of a line_item_id<br />Scope for public applications : read_sales */
        get: operations["api.sales.line_item_id"];
        /** Delete line_item<br />Scope for public applications : write_sales */
        delete: operations["api.sale_line_item.delete"];
    };
    "/sale_line_item/{line_item_id}/": {
        /** Update a line_item attribute<br />Scope for public applications : write_sales */
        put: operations["api.sale_line_item.update"];
    };
    "/sales/{sale_id}": {
        /** Returns details of a sale<br />Scope for public applications : read_sales */
        get: operations["api.sales.sale_id"];
    };
    "/closed_sales/{store_id}/{year}/{month}/{day}": {
        /** Returns closed sales in a store_id for a specific day or month<br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.closed_sales.index"];
    };
    "/closed_sales_by_tag/{tag_id}/{store_id}/{year}/{month}/{day}": {
        /** Returns closed sales for a specific tag_id in a store_id for a specific day or month<br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.closed_sales_by_tag.index"];
    };
    "/open_sales/{store_id}": {
        /** Returns open sales in a store_id (ORDER BY sale_id DESC)<br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.open_sales.index"];
    };
    "/sale_line_item_modifier/{line_item_id}/{modifier_id}/": {
        /** Add a modifier to a line_item<br />Scope for public applications : write_sales */
        post: operations["api.sale_line_item_modifier.add"];
        /** Delete a modifier on a line_item<br />Scope for public applications : write_sales */
        delete: operations["api.sale_line_item_modifier.delete"];
    };
    "/sale_line_item_exchange/{line_item_id}/{stock_id}/": {
        /** Exchange a line_item<br />Scope for public applications : write_sales */
        put: operations["api.sale_line_item.exchange"];
    };
    "/sales/add_global_discount/": {
        /** Global discount<br />Scope for public applications : write_sales */
        post: operations["api.add_global_discount"];
    };
    "/sales/open_package/": {
        /** Add an open package on a sale<br />Scope for public applications : write_sales */
        post: operations["api.sales.add_open_package"];
    };
    "/sales/open_package/pack/{pack_line_item_id}/{product_line_item_id}": {
        /** Pack a product in an open package<br />Scope for public applications : write_sales */
        put: operations["api.open_package.pack"];
    };
    "/sales/open_package/unpack/{line_item_id}": {
        /** Unpack a line item id (either a product or an open package)<br />Scope for public applications : write_sales */
        put: operations["api.open_package.unpack"];
    };
    "/sales/open_package/{line_item_id}": {
        /** Delete an open package (must be completely unpacked)<br />Scope for public applications : write_sales */
        delete: operations["api.open_package.delete"];
    };
    "/tags/sales/": {
        /** Returns tags for sales<br />Scope for public applications : read_sales */
        get: operations["api.tags.sales"];
    };
    "/sales_tags/{sale_id}": {
        /** Returns tags for a specific sale_id<br />Scope for public applications : read_sales */
        get: operations["api.tags.sale_id"];
        /** Add a tag to a specific sale_id<br />Scope for public applications : write_sales */
        post: operations["api.sales_tags.add"];
    };
    "/sales_tags/{sale_id}/{tag_id}": {
        /** Delete a tag to a specific sale_id<br />Scope for public applications : write_sales */
        delete: operations["api.sales_tags.delete"];
    };
    "/customers/search/": {
        /** Search for customers that match a supplied query<br />Scope for public applications : read_customers<br />Results per page : 250 */
        get: operations["api.search.customers.index"];
    };
    "/customers/search/tags/{tag_id}": {
        /** Returns customers search results by tag_id<br />Scope for public applications : read_customers<br />Results per page : 250 */
        get: operations["api.customers.tag_id.search"];
    };
    "/stock_transfer/search/": {
        /** Search for stock_transfer that match a supplied query<br />Scope for public applications : read_inventory<br />Results per page : 250 */
        get: operations["api.search.stock_transfer.index"];
    };
    "/products/search/": {
        /** Search for products that match a supplied query<br />Scope for public applications : read_products<br />Results per page : 250 */
        get: operations["api.search.products.index"];
    };
    "/sales/search/ext_ref/{q}": {
        /** Returns sales search results by ext_ref<br />Scope for public applications : read_sales<br />Results per page : 250 */
        get: operations["api.sales.ext_ref.search"];
    };
    "/shoutbox/": {
        /** Post a new message<br />Scope for public applications : read_customers */
        post: operations["api.shoutbox.add"];
    };
    "/sizes/{size_type_id}": {
        /** Returns variants for a specific variant type ID<br />Scope for public applications : read_products */
        get: operations["api.sizes.stock_id"];
    };
    "/sizes/": {
        /** Create a new size<br />Scope for public applications : write_products */
        post: operations["api.sizes.add"];
    };
    "/size_types": {
        /** Returns variant types by ID<br />Scope for public applications : read_products */
        get: operations["api.size_types.id"];
    };
    "/size_types/": {
        /** Create a new size type<br />Scope for public applications : write_products */
        post: operations["api.size_types.add"];
    };
    "/sizes_pretty/": {
        /** Returns variant types by ID - Pretty<br />Scope for public applications : read_products */
        get: operations["api.sizes_pretty.stock_id"];
    };
    "/sizes_specific_rules": {
        /** Returns specific rules for sizes<br />Scope for public applications : read_products<br />Results per page : 250 */
        get: operations["api.sizes_specific_rules.id"];
    };
    "/reports/turnover/{store_id}/{year}/{month}/{day}": {
        /** Returns sales total for store_id for a specific day or month <br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.stats.turnover.index"];
    };
    "/reports/product/{product_id}/{store_id}/{year}/{month}/{day}": {
        /** Returns sales for a specific product id<br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.stats.product.index"];
    };
    "/reports/products_tags/{store_id}/{year}/{month}": {
        /** Returns sales total for store_id for a specific month by products tags<br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.stats.products_tags.index"];
    };
    "/reports/sales_by_tag/{tag_id}/{store_id}/{year}/{month}/{day}": {
        /** Returns sales for a specific tag_id<br />Scope for public applications : read_reports<br />Results per page : 250<br />The only mandatoty parameter is store_id */
        get: operations["api.stats.sales_by_tag.index"];
    };
    "/reports/products/{store_id}/{year}/{month}": {
        /** Returns product sold for store_id for a specific month<br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.stats.products.index"];
    };
    "/reports/categories/{store_id}/{year}/{month}": {
        /** Returns sales by category for store_id for a specific month <br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.stats.categories.index"];
    };
    "/reports/brands/{store_id}/{year}/{month}": {
        /** Returns sales by brand for store_id for a specific month<br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.stats.brands.index"];
    };
    "/reports/suppliers/{store_id}/{year}/{month}": {
        /** Returns sales by supplier for store_id for a specific month<br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.stats.suppliers.index"];
    };
    "/reports/sales_per_customer/{store_id}/{year}/{month}/{day}": {
        /** Returns number of sales by customer for store_id for a specific day or month<br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.stats.sales_per_customer.index"];
    };
    "/reports/refresh/supply_prices": {
        /** Refresh supply prices of sold products based on a First In First Out (FIFO) calculation method<br />Scope for public applications : read_reports */
        get: operations["api.stats.refresh_supply_prices"];
    };
    "/reports/refresh/customers": {
        /** Refresh customers data (last order date, turnover, loyalty points etc...)<br />Scope for public applications : read_reports */
        get: operations["api.stats.refresh_customers"];
    };
    "/reports/refresh/stats/{year}/{month}": {
        /** Refresh stats<br />Scope for public applications : read_reports */
        get: operations["api.stats.refresh_stats"];
    };
    "/stock_available/warehouse_id/{warehouse_id}": {
        /** Returns stock available for a specific warehouse_id<br />Scope for public applications : read_inventory */
        get: operations["api.stock_available.stock_id"];
    };
    "/stock_available/all_wh": {
        /** Returns stock available for all warehouses<br />Scope for public applications : read_inventory */
        get: operations["api.stock_available.all_wh"];
    };
    "/stock_available/product_id/{product_id}": {
        /** Returns stock available for a specific product_id<br />Scope for public applications : read_inventory */
        get: operations["api.stock_available.product_id"];
    };
    "/stock_available/product_id_size/{product_id}/{product_size}": {
        /** Returns stock available for a specific product_id and size_id<br />Scope for public applications : read_inventory */
        get: operations["api.stock_available.product_id_size"];
    };
    "/stock_available/sn/{product_id}/{product_size}": {
        /** Returns serial numbers available for a specific product_id and size_id<br />Scope for public applications : read_inventory<br />Results per page : 250 */
        get: operations["api.stock_available.by_sn"];
    };
    "/stock_alert/": {
        /** Set product stock alert<br />Scope for public applications : write_inventory */
        put: operations["api.stock_available.set_alert"];
    };
    "/reset_stock_alerts/": {
        /** Reset stock alerts for all products for all warehouses<br />Scope for public applications : write_inventory */
        get: operations["api.stock_available.reset_stock_alert"];
    };
    "/inventory_inputs/warehouse_id/{warehouse_id}": {
        /** Returns stock orders for a specific warehouse_i<br />Scope for public applications : read_inventory<br />Results per page : 250 */
        get: operations["api.inventory_inputs.warehouse_id"];
    };
    "/inventory_counts/": {
        /** Set/Modify a counted quantity for a product<br />Scope for public applications : write_inventory */
        post: operations["api.inventory_counts.add"];
    };
    "/inventory_close/": {
        /** Close an inventory count (stock-take)<br />Scope for public applications : write_inventory */
        post: operations["api.inventory_counts.close"];
    };
    "/inventory_counts/sales/{warehouse_id}/{year}/{month}": {
        /** Returns sales linked to inventory counts for a specific month<br />Scope for public applications : read_inventory */
        get: operations["api.inventory_counts.sales.index"];
    };
    "/inventory_counts/stock_orders/{warehouse_id}/{year}/{month}": {
        /** Returns stock orders linked to inventory counts for a specific month<br />Scope for public applications : read_inventory */
        get: operations["api.inventory_counts.stock_orders.index"];
    };
    "/stock_transfer/": {
        /** Returns stock transfers<br />Scope for public applications : read_inventory<br />Results per page : 250 */
        get: operations["api.stock_transfer.index"];
        /** Create a stock transfer<br />Scope for public applications : write_inventory */
        post: operations["api.stock_transfer.add"];
    };
    "/stock_transfer/{transfer_id}": {
        /** Returns details of a stock transfer<br />Scope for public applications : read_inventory */
        get: operations["api.stock_transfer_info.index"];
    };
    "/stock_transfer_validate/": {
        /** Validate a stock transfer<br />Scope for public applications : write_inventory */
        post: operations["api.stock_transfer_validate.add"];
    };
    "/stock_transfer_details/{transfer_id}": {
        /** Returns details of a stock transfer<br />Scope for public applications : read_inventory */
        get: operations["api.stock_transfer_details.index"];
        /** Add a product to a specific transfer_id<br />Scope for public applications : write_inventory */
        post: operations["api.stock_transfer_details.add_product"];
    };
    "/stock_transfer_details/{stock_transfer_detail_id}": {
        /** Delete a stock_transfer_detail_id<br />Scope for public applications : write_inventory */
        delete: operations["api.stock_transfer_details.delete"];
    };
    "/stock_transfer_on_hold/": {
        /** Returns the list of stock transfer details on hold<br />Scope for public applications : read_inventory<br />Results per page : 250 */
        get: operations["api.stock_transfer_details_on_hold.index"];
    };
    "/stores": {
        /** Returns stores by ID<br />Scope for public applications : read_settings */
        get: operations["api.stores.index"];
    };
    "/subscriptions": {
        /** Returns subscriptions<br />Scope for public applications : read_settings */
        get: operations["api.subscriptions.get"];
    };
    "/suppliers/": {
        /** Returns suppliers by ID<br />Scope for public applications : read products */
        get: operations["api.suppliers.index"];
        /** Update a supplier<br />Scope for public applications : write_products */
        put: operations["api.suppliers.update"];
        /** Create a new supplier<br />Scope for public applications : write_products */
        post: operations["api.suppliers.add"];
    };
    "/suppliers/{supplier_id}": {
        /** Delete a supplier. All products with the deleted supplier will loose the information. Same for statistics for this supplier.<br />Scope for public applications : write_products */
        delete: operations["api.suppliers.delete"];
    };
    "/taxes": {
        /** Returns taxes by ID<br />Scope for public applications : read_settings */
        get: operations["api.taxes.index"];
    };
    "/till/{store_id}/{year}/{month}": {
        /** Returns cash movements for a store_id for a specific month<br />Scope for public applications : read_reports */
        get: operations["api.till.index"];
    };
    "/till/cash_in": {
        /** Add cash to your till (aside from your sales payments) such as your cash float or additional money<br />Scope for public applications : write_reports */
        post: operations["api.till.cash_in"];
    };
    "/till/cash_out": {
        /** Remove cash from your till (aside from change on cash payments) such as safe drops or store expenses<br />Scope for public applications : write_reports */
        post: operations["api.till.cash_out"];
    };
    "/time_tracking/check_in": {
        /** Check in a unique card_id<br />Scope for public applications : write_time_tracking */
        post: operations["api.time_tracking.check_in"];
    };
    "/time_tracking/check_out": {
        /** Check out a unique card_id<br />Scope for public applications : write_time_tracking */
        post: operations["api.time_tracking.check_out"];
    };
    "/time_tracking/{time_tracking_id}/": {
        /** Returns time_tracking_id details<br />Scope for public applications : read_time_tracking */
        get: operations["api.time_tracking.index"];
        /** Update a time_tracking id<br />Scope for public applications : write_time_tracking */
        put: operations["api.time_tracking.update"];
    };
    "/time_tracking_date/{store_id}/{year}/{month}/{day}/": {
        /** Returns time_tracking details for store_id for a specific day<br />Scope for public applications : read_time_tracking */
        get: operations["api.time_tracking_date.index"];
    };
    "/time_tracking_sale/{sale_id}/": {
        /** Returns time_tracking_id details for a given sale_id<br />Scope for public applications : read_time_tracking */
        get: operations["api.time_tracking_sale.index"];
    };
    "/customers_time_tracking/{customer_id}/": {
        /** Returns time_tracking for a specific customer_id<br />Scope for public applications : read_time_tracking */
        get: operations["api.customers_time_tracking.index"];
    };
    "/users": {
        /** Returns users by ID<br />Scope for public applications : no access */
        get: operations["api.users.index"];
    };
    "/user/password": {
        /** Update a user's password<br />Scope for public applications : no access */
        put: operations["api.user.update_password"];
    };
    "/warehouses": {
        /** Returns warehouses by ID<br />Scope for public applications : read_settings */
        get: operations["api.warehouses.index"];
    };
    "/webhooks": {
        /** Returns webhooks<br />Scope for public applications : none */
        get: operations["api.webhooks.get"];
    };
    "/webhooks/": {
        /** Add a webhook<br />Scope for public applications : none */
        post: operations["api.webhooks.add"];
    };
    "/webhooks/{webhook_id}": {
        /** Delete a webhook<br />Scope for public applications : none */
        delete: operations["api.webhooks.delete"];
    };
    "/z/payment_types/{store_id}/{year}/{month}/{day}": {
        /** Returns sales payments for store_id for a specific day<br />Scope for public applications : read_reports */
        get: operations["api.z.payment_types.index"];
    };
    "/z/payments_received/{store_id}/{year}/{month}/{day}": {
        /** Returns payments received for store_id for a specific day<br />Scope for public applications : read_reports */
        get: operations["api.z.payments_received.index"];
    };
    "/z/customers_credit_deposits/{store_id}/{year}/{month}/{day}": {
        /** Returns customers credit deposits for store_id for a specific day<br />Scope for public applications : read_reports */
        get: operations["api.z.customers_credit_deposits.index"];
    };
    "/z/customers/{store_id}/{year}/{month}/{day}": {
        /** Returns customers sales for store_id for a specific day<br />Scope for public applications : read_reports */
        get: operations["api.z.customers.index"];
    };
    "/z/taxes/{store_id}/{year}/{month}/{day}": {
        /** Returns sales taxes for store_id for a specific day<br />Scope for public applications : read_reports */
        get: operations["api.z.taxes.index"];
    };
    "/z/categories/{store_id}/{year}/{month}/{day}": {
        /** Returns categories statistics for store_id for a specific day<br />Scope for public applications : read_reports */
        get: operations["api.z.categories.index"];
    };
    "/z/accounting_accounts/{store_id}/{year}/{month}/{day}": {
        /** Returns accounting_accounts statistics for store_id for a specific day<br />Scope for public applications : read_reports */
        get: operations["api.z.accounting_accounts.index"];
    };
    "/z/date/": {
        /** Update the end-of-day date for a sale_id<br />Scope for public applications : write_reports */
        put: operations["api.z.update_date_z"];
    };
    "/z/closure/{store_id}/{year}/{month}/{day}": {
        /** Close the day and previous days<br />Scope for public applications : forbidden */
        post: operations["api.z.closure.add"];
    };
    "/z/cash_book/{store_id}/{year}/{month}/{day}": {
        /** Returns cash book movements for store_id for a specific day or month <br />Scope for public applications : read_reports<br />Results per page : 250 */
        get: operations["api.z.cash_book.index"];
    };
}
export interface definitions {
    error: {
        error?: string;
        error_description?: string;
        code: number;
        details?: {
            [key: string]: unknown;
        };
    } & {
        message: unknown;
    };
    category: {
        category_id: number;
        category_name: string;
        category_id_parent: number;
        category_enabled: number;
        category_position: number;
        category_bck_color: string;
        category_color: string;
    };
    product: {
        product_id: number;
        product_model: string;
        product_barcode: string;
        product_brand: number;
        product_supplier: number;
        product_price: string;
        product_discount_price: string;
        product_supply_price: string;
        product_category: number;
        product_size_type: number;
        product_stock_management: number;
        product_supplier_reference: string;
        product_vat: number;
    };
    brands: {
        brand_id: number;
        brand_name: string;
        brand_enabled: number;
        brand_position: number;
    };
    suppliers: {
        supplier_id: number;
        supplier_name: string;
        supplier_enabled: number;
        supplier_position: number;
    };
    taxes: {
        tax_id: number;
        tax_value: string;
        tax_name: string;
        tax_enabled: number;
        tax_default: number;
        tax_position: number;
    };
    users: {
        user_id: number;
        user_last_name: string;
        user_first_name: string;
        user_email: string;
        user_fasti?: number;
        user_validity: string;
        user_manager_id: number;
    };
    productslist: {
        start: number;
        number: string;
    };
}
export interface parameters {
    /** store_id */
    store_id: number;
    /** vendor_id */
    vendor_id: number;
    /** url */
    url: string;
}
export interface responses {
    /** Message successfully sent */
    200: unknown;
    /** Unauthorized - invalid authentication */
    401: {
        schema: definitions["error"];
    };
    /** Forbidden - insufficient user rights */
    403: {
        schema: definitions["error"];
    };
    /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
    406: {
        schema: definitions["error"];
    };
    /** Unprocessable entity - an error was encountered when parsing the data */
    422: {
        schema: definitions["error"];
    };
    /** Internal server error */
    500: {
        schema: definitions["error"];
    };
}
export interface operations {
    /** Returns action links/buttons<br />Scope for public applications : none */
    "api.action_links.get": {
        responses: {
            /** Action buttons */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add an action link/button */
    "api.action_links.add": {
        parameters: {
            formData: {
                /** The text that will appear to the merchant. It should be task oriented, and not just the name of your app. */
                action_link_label: string;
                /** The page where this link should appear to the merchant. Try to place it only where it makes logical sense for the user. In general, avoid adding admin links to every page. */
                action_link_location: "sale" | "product" | "salebtn" | "stock_order" | "customer" | "timestamp" | "main_menu" | "stock_transfer" | "salebtnleft" | "dailystats" | "sale_line_item" | "kitchen_screen";
                /** The URL where your app is hosted, or a specific URL for this task. If your url is non valid or if it drops an error, your action will be blocked */
                action_link_url: string;
                /** How the url should be called. page for a simple link, embedded to appear within a frame in the application or silent for a curl-like scheme. Possible values : silent , embedded, page. Default value : page */
                action_link_type?: "page" | "embedded" | "silent";
                /** The target if action_link_type = page i.e. if your link opens a page outside the application. If empty, default value is _self. */
                action_link_target?: "_self" | "_blank" | "_top";
                /** The unique link id if used by an app (if already exists, it will be replaced). Max 80 chars. */
                app_link_id?: string;
                /** The store id where the link should be displayed. If value is 0, the link will be displayed in every store. If empty, default value is 0. */
                action_link_store_id?: number;
                /** The user id For wich the link should be displayed. If value is 0, the link will be displayed for all users. If empty, default value is 0 */
                action_link_user_id?: number;
            };
        };
        responses: {
            /** Action link/button successfully added */
            200: unknown;
            /** Unauthorized action */
            401: unknown;
            /** Server Error */
            500: unknown;
        };
    };
    /** Execute an action link/button */
    "api.action_links.exec": {
        parameters: {
            formData: {
                /** action_link_id */
                action_link_id: string;
                /** action_link_ressource_id */
                action_link_ressource_id: string;
                /** store_id */
                store_id: string;
                /** ip_address */
                ip_address: string;
            };
        };
        responses: {
            /** Action link/button successfully executed */
            200: unknown;
            /** Unauthorized action */
            401: unknown;
            /** Server Error */
            500: unknown;
        };
    };
    /** Delete action_link_id. */
    "api.action_links.delete": {
        parameters: {
            path: {
                /** action_link_id to delete */
                action_link_id: number;
            };
        };
        responses: {
            /** Action link/button successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns brands by ID (ORDER BY brand_id DESC)<br />Scope for public applications : read_products<br />Results per page : 250 */
    "api.brands.index": {
        parameters: {
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Brands overview */
            200: {
                schema: definitions["brands"];
            };
            /** Unauthorized - invalid authentication */
            401: unknown;
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: unknown;
        };
    };
    /** Update a brand<br />Scope for public applications : write_products */
    "api.brands.update": {
        parameters: {
            formData: {
                /** ID of the brand that needs to be updated */
                brand_id: number;
                /** New name of the brand that needs to be updated */
                brand_name?: string;
            };
        };
        responses: {
            /** Brand successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Create a new brand<br />Scope for public applications : write_products */
    "api.brands.add": {
        parameters: {
            formData: {
                /** Name of the brand that needs to be added */
                brand_name?: string;
                /** External reference */
                brand_ref_ext?: string;
            };
        };
        responses: {
            /** Brand successfully added */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns calendar events for store_id for a specific day<br />Scope for public applications : read_calendar_events */
    "api.calendar.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** Taxes */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns calendar event_id<br />Scope for public applications : read_calendar_events */
    "api.calendar.event_id.index": {
        parameters: {
            path: {
                /** event_id */
                event_id: number;
            };
        };
        responses: {
            /** Taxes */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a calendar event<br />Scope for public applications : write_calendar_events */
    "api.calendar.add_event": {
        parameters: {
            formData: {
                /** store_id */
                store_id: string;
                /** title */
                title: string;
                /** start | format : YYYY-MM-DD HH:MM:SS */
                start: string;
                /** end | format : YYYY-MM-DD HH:MM:SS */
                end?: string;
                /** url */
                url?: string;
                /** allDay | format : null OR 1 */
                allDay?: string;
                /** ressource_id */
                ressource_id?: string;
                /** vendor_id */
                vendor_id?: string;
                /** customer_id */
                customer_id?: string;
                /** sale_id */
                sale_id?: string;
                /** comments */
                comments?: string;
                /** color | default : #ff6600 | regex : #[A-Fa-f0-9] */
                color?: string;
                /** textColor | default : #ffffff | regex : #[A-Fa-f0-9] */
                textColor?: string;
            };
        };
        responses: {
            /** Tag successfully added */
            201: unknown;
            /** Client error */
            400: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete a calendar event<br />Scope for public applications : write_calendar_events */
    "api.calendar.delete_event": {
        parameters: {
            path: {
                /** Calendar id */
                id: number;
            };
        };
        responses: {
            /** Event successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns categories by ID (ORDER BY category_id DESC)<br />Scope for public applications : read_products<br />Results per page : 250 */
    "api.categories.index": {
        parameters: {
            query: {
                /** Order by */
                order_by?: "category_id" | "category_name" | "category_id_parent" | "category_position";
                /** Sort */
                sort?: "DESC" | "ASC";
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Categories overview */
            200: {
                schema: definitions["category"];
            };
            /** Unauthorized action */
            401: unknown;
        };
    };
    /** Update a category<br />Scope for public applications : write_products */
    "api.categories.update": {
        parameters: {
            formData: {
                /** ID of the category that needs to be updated */
                category_id: number;
                /** One of the following category attribute : category_name, category_id_parent, category_enabled, category_enabled_www, category_position, category_bck_color, category_color, category_desc, accounting_account, category_ref_ext */
                category_attribute: "category_name" | "category_id_parent" | "category_enabled" | "category_enabled_www" | "category_position" | "category_bck_color" | "category_color" | "category_desc" | "accounting_account" | "category_ref_ext";
                /** New value for the category attribute */
                new_value?: string;
            };
        };
        responses: {
            /** Category successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Create a new category<br />Scope for public applications : write_products */
    "api.categories.add": {
        parameters: {
            formData: {
                /** Name of the category that needs to be added */
                category_name?: string;
                /** Parent ID of the category that needs to be added */
                category_parent_id?: number;
                /** Enabled ? 0|1 (default:1) */
                category_enabled?: number;
                /** Background color (default:#FF8C00) */
                category_bck_color?: string;
                /** Font color (default:#FFFFFF) */
                category_color?: string;
                /** External reference */
                category_ref_ext?: string;
            };
        };
        responses: {
            /** Brand successfully added */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns pending credit notes in a store_id<br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.credit_notes.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Open sales */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns customers by ID (ORDER BY customers_id DESC)<br />Scope for public applications : read_customers<br />Results per page : 250 */
    "api.customers.index": {
        parameters: {
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Customers overview */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Create a new customer<br />Scope for public applications : write_customers */
    "api.customers.add": {
        parameters: {
            formData: {
                /** First name of the customer that needs to be added */
                customers_first_name?: string;
                /** Last name of the customer that needs to be added */
                customers_last_name?: string;
                /** Company of the customer that needs to be added */
                customers_company?: string;
                /** Email of the customer that needs to be added */
                customers_email?: string;
                /** Country of the customer that needs to be added (iso_code_3/iso_alpha3) */
                customers_country?: string;
                /** Tax number of the customer that needs to be added */
                customers_tax_number?: string;
                /** Phone number of the customer that needs to be added */
                customers_phone_number?: string;
                /** Birth date of the customer that needs to be added (YYYY-MM-DD) */
                customers_birth_date?: string;
                /** External reference */
                customers_ref_ext?: string;
                /** Misc */
                customers_misc?: string;
            };
        };
        responses: {
            /** Customer successfully added */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns customers born on a specific day<br />Scope for public applications : read_customers */
    "api.customers_birthday.index": {
        parameters: {
            path: {
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** Customers lists */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns customers lists (ORDER BY list_id DESC)<br />Scope for public applications : read_customers<br />Results per page : 250 */
    "api.customers_lists.index": {
        parameters: {
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Customers lists overview */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns customers from a specific list<br />Scope for public applications : read_customers<br />Results per page : 250 */
    "api.customers_lists.list_id.search": {
        parameters: {
            path: {
                /** List ID */
                list_id: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Customers details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Set number of customers in shop_id at date<br />Scope for public applications : write_reports */
    "api.customers.set_number": {
        parameters: {
            formData: {
                /** Number of customers */
                number_of_customers?: string;
                /** Date | format : YYYY-MM-DD */
                date?: string;
                /** shop_id */
                shop_id?: number;
            };
        };
        responses: {
            /** Number of customers successfully saved */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns details of a customer address<br />Scope for public applications : read_customers */
    "api.customers_addresses.address_id": {
        parameters: {
            path: {
                /** address_id */
                address_id: number;
            };
        };
        responses: {
            /** Sale details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete a customer address<br />Scope for public applications : write_customers */
    "api.customers_addresses.delete": {
        parameters: {
            path: {
                /** address_id */
                address_id: number;
            };
        };
        responses: {
            /** Address successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a customer address<br />Scope for public applications : write_customers */
    "api.customers_addresses.add": {
        parameters: {
            formData: {
                /** customers_id */
                customers_id?: number;
            };
        };
        responses: {
            /** Customer address successfully added */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Update a customer address<br />Scope for public applications : write_customers */
    "api.customers_addresses.update": {
        parameters: {
            path: {
                /** address_id */
                address_id: number;
            };
            formData: {
                /** One of the following address attribute : gender (0:unknown|1:male|2:female), first_name, last_name, email, phone, company, address, zip_code, city, state, country (iso_code_3), display (0|1), other, default (0|1) */
                address_attribute: "gender" | "first_name" | "last_name" | "email" | "phone" | "company" | "address" | "zip_code" | "city" | "state" | "country" | "display" | "other" | "default";
                /** New value for the address attribute */
                new_value?: string;
            };
        };
        responses: {
            /** Product attribute successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns details of a customers_id<br />Scope for public applications : read_customers */
    "api.customer.customers_id": {
        parameters: {
            path: {
                /** customers_id */
                customers_id: number;
            };
        };
        responses: {
            /** Customer details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete a customer<br />Scope for public applications : write_customers */
    "api.customer.delete": {
        parameters: {
            path: {
                /** customers_id */
                customers_id: number;
            };
        };
        responses: {
            /** Customer successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns products sold to a specific customers_id (ORDER BY sale_id DESC)<br />Scope for public applications : read_customers<br />Results per page : 250 */
    "api.customer.customers_id.products_solds": {
        parameters: {
            path: {
                /** customers_id */
                customers_id: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Customer details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Update a customer<br />Scope for public applications : write_customers */
    "api.customer.update": {
        parameters: {
            path: {
                /** ID of the customer */
                customers_id: number;
            };
            formData: {
                /** One of the following customer attribute : gender (0:unknown|1:male|2:female), last_name, first_name, email, company, phone, vat, country, date_of_birth, customers_code, comments, intial_loyalty_points, validity, customers_id_referrer, accounting_account, customers_ref_ext, password, customers_misc */
                customers_attribute: "gender" | "last_name" | "first_name" | "email" | "company" | "phone" | "vat" | "country" | "date_of_birth" | "customers_code" | "comments" | "intial_loyalty_points" | "validity" | "customers_id_referrer" | "accounting_account" | "customers_ref_ext" | "password" | "customers_misc";
                /** New value for the customers_attribute */
                new_value?: string;
            };
        };
        responses: {
            /** Customer successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns store credit lines for a customers_id<br />Scope for public applications : read_store_credit<br />Results per page : 250 */
    "api.customers_credit.customers_id": {
        parameters: {
            path: {
                /** customers_id */
                customers_id: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Customers store credit details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a store credit line to a customers_id<br />Scope for public applications : write_store_credit */
    "api.customers_credit.add_line": {
        parameters: {
            formData: {
                /** Store ID */
                store_id: number;
                /** customers_id */
                customers_id: number;
                /** amount */
                amount: number;
                /** Currency. ISO 4217 currency code https://en.wikipedia.org/wiki/ISO_4217#Active_codes */
                currency_code: string;
                /** payment_type */
                payment_type: string;
                /** comments */
                comments?: string;
            };
        };
        responses: {
            /** Credit line successfully added */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns tags for customers<br />Scope for public applications : read_customers */
    "api.tags.customers": {
        responses: {
            /** Tags */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns tags for a specific customer_id<br />Scope for public applications : read_customers */
    "api.tags.customer_id": {
        parameters: {
            path: {
                /** Customer ID */
                customer_id: number;
            };
        };
        responses: {
            /** Tag ID */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a tag to a specific customer_id<br />Scope for public applications : write_customers */
    "api.customers_tags.add": {
        parameters: {
            path: {
                /** Customer ID for which you need to add a tag ID */
                customer_id: number;
            };
            formData: {
                /** Tag ID that needs to be added */
                tag_id: number;
            };
        };
        responses: {
            /** Tag successfully added */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete a tag to a specific customer_id<br />Scope for public applications : write_customers */
    "api.customers_tags.delete": {
        parameters: {
            path: {
                /** Customer ID for which you need to delete a tag ID */
                customer_id: number;
                /** Tag ID that needs to be deleted. 0 to delete all tags */
                tag_id: number;
            };
        };
        responses: {
            /** Tag successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns the list of stock orders<br />Scope for public applications : read_inventory<br />Results per page : 250 */
    "api.inventory_inputs.index": {
        parameters: {
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Inventory inputs */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Create a stock order<br />Scope for public applications : write_inventory */
    "api.inventory_inputs.add": {
        parameters: {
            formData: {
                /** Stock ID */
                stock_id: number;
                /** Supplier ID */
                supplier_id?: number;
                /** Inventory input label */
                label?: string;
            };
        };
        responses: {
            /** Customers address successfully added */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns details of a stock order<br />Scope for public applications : read_inventory */
    "api.inventory_inputs_info.index": {
        parameters: {
            path: {
                /** inventory_input_id */
                inventory_input_id: number;
            };
        };
        responses: {
            /** Inventory input details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns details for a stock order<br />Scope for public applications : read_inventory */
    "api.inventory_input_details.index": {
        parameters: {
            path: {
                /** Inventory input ID */
                inventory_input_id: number;
            };
        };
        responses: {
            /** Inventory input details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a product line to a stock order<br />Scope for public applications : write_inventory */
    "api.inventory_input_details.add_product": {
        parameters: {
            path: {
                /** Inventory_input ID */
                inventory_input_id: number;
            };
            formData: {
                /** Product ID you need to add to inventory_input_id */
                product_id: number;
                /** Product size you need to add to inventory_input_id */
                product_size: number;
                /** Quantity (if empty value is 1) */
                quantity?: number;
                /** Product supply price (if empty value will be supply price) */
                product_price?: number;
                /** Product serial number */
                product_serial_number?: number;
            };
        };
        responses: {
            /** Product successfully added */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Update an inventory_input_detail_id<br />Scope for public applications : write_inventory */
    "api.inventory_input_detail_id.update": {
        parameters: {
            path: {
                /** inventory_input_detail_id */
                inventory_input_detail_id: number;
            };
            formData: {
                /** One of the following sale attribute : product_serial_number, product_price, quantity */
                inventory_input_detail_id_attribute: "product_serial_number" | "product_price" | "quantity";
                /** New value for the inventory_input_detail_id attribute */
                new_value?: string;
            };
        };
        responses: {
            /** Inventory input detail attribute successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Validate a stock order<br />Scope for public applications : write_inventory */
    "api.inventory_input.validate": {
        parameters: {
            formData: {
                /** Inventory input ID */
                inventory_input_id: number;
            };
        };
        responses: {
            /** Stock order successfully validated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns the list of stock orders details on hold<br />Scope for public applications : read_inventory<br />Results per page : 250 */
    "api.inventory_inputs_on_hold.index": {
        parameters: {
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Inventory inputs details on hold */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns pending sales sent to kitchen<br />Scope for public applications : read_kitchen_screen */
    "api.kitchen.open_tables": {
        responses: {
            /** Pending open tables */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns cooking stations<br />Scope for public applications : read_kitchen_screen */
    "api.kitchen.cooking_stations": {
        responses: {
            /** cooking stations */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns sale details<br />Scope for public applications : read_kitchen_screen */
    "api.kitchen.sale_details": {
        parameters: {
            path: {
                /** sale_id */
                sale_id: number;
            };
        };
        responses: {
            /** Sale details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add item to the kitchen screen<br />Scope for public applications : write_kitchen_screen */
    "api.kitchen.add_line_item": {
        parameters: {
            formData: {
                /** item_id */
                item_id: number;
            };
        };
        responses: {
            /** Item successfully added */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add item to the kitchen screen<br />Scope for public applications : write_kitchen_screen */
    "api.kitchen.add_line_items": {
        parameters: {
            formData: {
                /** sale_id */
                sale_id: number;
            };
        };
        responses: {
            /** Sale is empty | Items successfully added */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Update item status<br />Scope for public applications : write_kitchen_screen */
    "api.kitchen.update_item_status": {
        parameters: {
            formData: {
                /** item_id */
                item_id: number;
                /** status (0|1|2) */
                status: number;
            };
        };
        responses: {
            /** Item status successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete a sale from the kitchen screen<br />Scope for public applications : write_kitchen_screen */
    "api.kitchen.delete_sale": {
        parameters: {
            path: {
                /** Sale id */
                sale_id: number;
            };
        };
        responses: {
            /** Sale successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Post a new message */
    "api.message.add": {
        parameters: {
            formData: {
                /** store_id */
                store_id: number;
                /** One of the following types : notifications */
                thread: "notifications";
                /** One of the following objects : none (default), sale, product, client, planning */
                object: "none" | "sale" | "product" | "client" | "planning";
                /** sale_id or product_id */
                object_id?: number;
                /** title */
                title?: string;
                /** message */
                message?: string;
            };
        };
        responses: {
            /** Message successfully sent */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns modifiers<br />Scope for public applications : read_products */
    "api.modifiers.index": {
        parameters: {
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Modifiers */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Create a modifier<br />Scope for public applications : write_products */
    "api.modifiers.add": {
        parameters: {
            formData: {
                /** Name of the modifier */
                modifier_label?: string;
                /** Modifier group ID to which the modifer belongs to. If 0 the modifier is created as a modifier group */
                modifier_group_id?: number;
                /** Enabled ? 0|1 (default:1) */
                modifier_enabled?: number;
                /** Enabled for web ? 0|1 (default:0) */
                modifier_enabled_www?: number;
                /** Required ? 0|1 (default:0) / Only if modifier_group_id == 0 */
                modifier_required?: number;
                /** Price / Only if modifier_group_id <> 0 */
                modifier_price?: string;
                /** External reference */
                modifier_ref_ext?: string;
            };
        };
        responses: {
            /** Modifier successfully added */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Update a modifier<br />Scope for public applications : write_products */
    "api.modifiers.update": {
        parameters: {
            path: {
                /** ID of the modifier */
                modifier_id: number;
            };
            formData: {
                /** One of the following modifier attribute : modifier_label, modifier_group_id, modifier_enabled (0|1), modifier_enabled_www (0|1), modifier_required (0|1), modifier_price, modifier_ref_ext */
                modifier_attribute: "modifier_label" | "modifier_group_id" | "modifier_enabled" | "modifier_enabled_www" | "modifier_required" | "modifier_price" | "modifier_ref_ext";
                /** New value for the modifier_attribute */
                new_value?: string;
            };
        };
        responses: {
            /** Modifier successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns payment types for store_id<br />Scope for public applications : read_settings */
    "api.payment_types.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
            };
        };
        responses: {
            /** Payment types */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns the list of payments with due dates for a specific store_id<br />Scope for public applications : read_sales<br />Results per page : 250 */
    "api.payments_due_date.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Payment types */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns prepaid purchases lines<br />Scope for public applications : read_customers<br />Results per page : 250 */
    "api.prepaid_purchases.index": {
        parameters: {
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Prepaid purchases details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a prepaid purchase line to a customers_id<br />Scope for public applications : write_customers */
    "api.prepaid_purchases.add_line": {
        parameters: {
            formData: {
                /** customers_id */
                customers_id: number;
                /** sale_id */
                sale_id: number;
                /** amount */
                amount: number;
                /** Currency. ISO 4217 currency code https://en.wikipedia.org/wiki/ISO_4217#Active_codes */
                currency_code: string;
                /** comments */
                comments?: string;
            };
        };
        responses: {
            /** Prepaid purchase line successfully added */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns prepaid purchases lines for a customers_id<br />Scope for public applications : read_customers<br />Results per page : 250 */
    "api.prepaid_purchases.customers_id": {
        parameters: {
            path: {
                /** customers_id */
                customers_id: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Customers prepaid purchases details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Print a document<br />Scope for public applications : print<br /><br />In order to be able to print with this method you need to :<br />- On Hiboutik in 'General Settings' set the public IP address of your point of sale. You can use a DYN DNS service if you don't have a public static IP address. <br />- Set a port forwarding on you router from the port of your choice (the one you will fill below) to the port 9100 on your local printer */
    "api.print.misc": {
        parameters: {
            formData: {
                /** Store ID */
                store_id: number;
                /** IP address - Leave blank for default */
                ip_address?: string;
                /** Port number - Leave blank for default */
                port?: number;
                /** One of the following : receipt, kitchen, label. If empty default is receipt */
                printer?: string;
                /** The data to print */
                data?: string;
            };
        };
        responses: {
            /** Document successfully printed */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns products (default sorting is by ID DESC)<br />Scope for public applications : read_products<br />Results per page : 250 */
    "api.products.index": {
        parameters: {
            query: {
                /** Order by */
                order_by?: "product_id" | "product_model" | "product_price" | "product_supply_price" | "product_size_type" | "product_display" | "product_display_www" | "product_arch" | "updated_at" | "product_order";
                /** Sort */
                sort?: "DESC" | "ASC";
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Products overview */
            200: {
                schema: definitions["product"];
            };
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Create a new product<br />Scope for public applications : write_products */
    "api.products.add": {
        parameters: {
            formData: {
                /** product_model */
                product_model?: string;
                /** product_barcode */
                product_barcode?: string;
                /** product_brand */
                product_brand?: number;
                /** product_supplier */
                product_supplier?: number;
                /** product_price */
                product_price?: string;
                /** product_discount_price */
                product_discount_price?: string;
                /** product_supply_price */
                product_supply_price?: string;
                /** product_category */
                product_category?: number;
                /** product_size_type */
                product_size_type?: number;
                /** product_stock_management */
                product_stock_management?: number;
                /** product_supplier_reference */
                product_supplier_reference?: string;
                /** product_package */
                product_package?: number;
                /** product_vat */
                product_vat?: number;
                /** External reference */
                products_ref_ext?: string;
            };
        };
        responses: {
            /** Product successfully created */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a product image<br />Scope for public applications : write_products */
    "api.products_images.add": {
        parameters: {
            path: {
                /** ID of the product */
                product_id: number;
            };
            formData: {
                /** Image of the product. You must provide a valid square .jpeg or .jpg image file, no bigger than 1Mb. Final image will be resized to 100x100px. */
                image: unknown;
                /** One of the following line_item attribute : default, center_zoom or frame */
                framing_type?: "default" | "center_zoom" | "frame";
            };
        };
        responses: {
            /** Product image successfully added */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a product image<br />Scope for public applications : write_products */
    "api.products_images_1000x1000.add": {
        parameters: {
            path: {
                /** ID of the product */
                product_id: number;
            };
            formData: {
                /** Image of the product. You must provide a valid square .jpeg or .jpg image file, no bigger than 1Mb. Final image will be resized to 1000x1000px. */
                image: unknown;
                /** One of the following line_item attribute : default, center_zoom or frame */
                framing_type?: "default" | "center_zoom" | "frame";
                /** You can upload up to 4 images */
                image_id?: "1" | "2" | "3" | "4";
            };
        };
        responses: {
            /** Product image successfully added */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns product barcode for a store_id & product_id & size_id<br />Scope for public applications : read_products */
    "api.products_barcode.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** product_id */
                product_id: number;
                /** size_id */
                size_id: number;
            };
        };
        responses: {
            /** Product barcode for a store_id & product_id & size_id */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns products sold in a store_id at a specific date<br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.products_sold.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Products solds */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns products purchased in a warehouse_id at a specific date<br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.products_purchased.index": {
        parameters: {
            path: {
                /** warehouse_id */
                warehouse_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Products solds */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns product returned for store_id for a specific day<br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.products_returned.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Report of products returned */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Update a product<br />Scope for public applications : write_products */
    "api.product.update": {
        parameters: {
            path: {
                /** ID of the product */
                product_id: number;
            };
            formData: {
                /** size_id */
                size_id?: number;
                /** shop_id */
                shop_id?: number;
                /** One of the following product attribute : product_model, product_barcode, product_brand, product_supplier, product_price, product_discount_price, product_supply_price, points_in, points_out, product_category, product_stock_management, product_supplier_reference, product_vat, product_display, product_display_www, product_font_color, product_bck_btn_color, product_arch, product_desc, product_storage_location, products_ref_ext, product_size_type, accounting_account */
                product_attribute: "product_model" | "product_barcode" | "product_brand" | "product_supplier" | "product_price" | "product_discount_price" | "product_supply_price" | "points_in" | "points_out" | "product_category" | "product_stock_management" | "product_supplier_reference" | "product_vat" | "product_display" | "product_display_www" | "product_font_color" | "product_bck_btn_color" | "product_arch" | "product_desc" | "product_storage_location" | "products_ref_ext" | "product_size_type" | "accounting_account";
                /** New value for the product attribute */
                new_value?: string;
            };
        };
        responses: {
            /** Product attribute successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns product details<br />Scope for public applications : read_products */
    "api.products.id": {
        parameters: {
            path: {
                /** ID of the product */
                product_id: number;
            };
        };
        responses: {
            /** Products details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns products search results by name<br />Scope for public applications : read_products<br />Results per page : 250 */
    "api.products.name.search": {
        parameters: {
            path: {
                /** Search value */
                q: string;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Products details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns products search results by barcode<br />Scope for public applications : read_products */
    "api.products.barcode.search": {
        parameters: {
            path: {
                /** Search value */
                q: string;
            };
        };
        responses: {
            /** Products details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns products search results by supplier reference<br />Scope for public applications : read_products */
    "api.products.supplier_reference.search": {
        parameters: {
            path: {
                /** Search value */
                q: string;
            };
        };
        responses: {
            /** Products details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns products search results by category_id<br />Scope for public applications : read_products<br />Results per page : 250 */
    "api.products.category_id.search": {
        parameters: {
            path: {
                /** Cadegory ID */
                category_id: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Products details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns products search results by tax_id<br />Scope for public applications : read_products<br />Results per page : 250 */
    "api.products.tax_id.search": {
        parameters: {
            path: {
                /** Tax ID */
                tax_id: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Products details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns products search results by tag_id<br />Scope for public applications : read_products<br />Results per page : 250 */
    "api.products.tag_id.search": {
        parameters: {
            path: {
                /** Tag ID */
                tag_id: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Products details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns open package products<br />Scope for public applications : read_products<br />Results per page : 250 */
    "api.products.open_packages.search": {
        parameters: {
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Products details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete a product specific rule<br />Scope for public applications : write_products */
    "api.product_specific_rules.delete": {
        parameters: {
            path: {
                /** Shop ID for which you need to delete the product specific rule or 0 for all shops */
                shop_id: number;
                /** Product ID for which you need to delete the product specific rule or 0 for all products */
                product_id: number;
                /** Size ID for which you need to delete the product specific rule or 999 for all sizes */
                size_id: number;
            };
        };
        responses: {
            /** Tag successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns modifiers for a specific product_id<br />Scope for public applications : read_products */
    "api.modifiers.product_id": {
        parameters: {
            path: {
                /** Product ID */
                product_id: number;
            };
        };
        responses: {
            /** Modifier ID & label */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a modifier to a specific product_id<br />Scope for public applications : write_products */
    "api.products_modifiers.add": {
        parameters: {
            path: {
                /** Product ID for which you need to add a modifier ID */
                product_id: number;
            };
            formData: {
                /** Modifier ID that needs to be added */
                modifier_id: number;
            };
        };
        responses: {
            /** Modifier successfully added */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns modifiers products<br />Scope for public applications : read_products */
    "api.modifiers.products.index": {
        parameters: {
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Modifier ID & label */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete a modifier to a specific product_id<br />Scope for public applications : write_products */
    "api.products_modifiers.delete": {
        parameters: {
            path: {
                /** Product ID for which you need to delete a modifier ID */
                product_id: number;
                /** Modifier ID that needs to be deleted */
                modifier_id: number;
            };
        };
        responses: {
            /** Modifier successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns tags for products<br />Scope for public applications : read_products */
    "api.tags.products": {
        responses: {
            /** Tags */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns tags for a specific product_id<br />Scope for public applications : read_products */
    "api.tags.product_id": {
        parameters: {
            path: {
                /** Product ID */
                product_id: number;
            };
        };
        responses: {
            /** Tag ID */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a tag to a specific product_id<br />Scope for public applications : write_products */
    "api.products_tags.add": {
        parameters: {
            path: {
                /** Product ID for which you need to add a tag ID */
                product_id: number;
            };
            formData: {
                /** Tag ID that needs to be added */
                tag_id: number;
            };
        };
        responses: {
            /** Tag successfully added */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns tags for products<br />Scope for public applications : read_products */
    "api.tags.products.index": {
        parameters: {
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Tag ID */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete a tag to a specific product_id<br />Scope for public applications : write_products */
    "api.products_tags.delete": {
        parameters: {
            path: {
                /** Product ID for which you need to delete a tag ID */
                product_id: number;
                /** Tag ID that needs to be deleted */
                tag_id: number;
            };
        };
        responses: {
            /** Tag successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Reset account<br />Scope for public applications : write_settings<br />Account must be in demo mode */
    "api.reset.misc": {
        parameters: {
            formData: {
                /** What you want to reset : sales_and_stock sale, sales_keep_stock, sales_and_products, clients, everything */
                reset_action: "sales_and_stock" | "sales_keep_stock" | "sales_and_products" | "clients" | "everything";
            };
        };
        responses: {
            /** Account successfully reseted */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Reset loyalty points for customers_id<br />Scope for public applications : write_settings<br />Account must be in demo mode */
    "api.reset.customers.misc": {
        parameters: {
            formData: {
                /** customers_id */
                customers_id: number;
            };
        };
        responses: {
            /** Loyalty points successfully reseted */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns rooms by ID */
    "api.rooms.index": {
        responses: {
            /** Rooms overview */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns ressources by ID */
    "api.ressources.index": {
        responses: {
            /** Ressources overview */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns ressource details */
    "api.ressources.id": {
        parameters: {
            path: {
                /** ID of the ressource */
                ressource_id: number;
            };
        };
        responses: {
            /** Ressource details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add/Update comments<br />Scope for public applications : write_sales */
    "api.sales.comments.add": {
        parameters: {
            formData: {
                /** Sale ID */
                sale_id: number;
                /** Sale comments */
                comments?: string;
            };
        };
        responses: {
            /** Comments successfully added/modified */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Create a new sale<br />Scope for public applications : write_sales */
    "api.sales.add": {
        parameters: {
            formData: {
                /** Store ID */
                store_id: number;
                /** Customer ID */
                customer_id?: number;
                /** Duty-free sale (0|1) */
                duty_free_sale?: number;
                /** Prices are without taxes (0|1) */
                prices_without_taxes?: number;
                /** Currency. ISO 4217 currency code https://en.wikipedia.org/wiki/ISO_4217#Active_codes */
                currency_code: string;
                /** Vendor ID */
                vendor_id?: string;
            };
        };
        responses: {
            /** Sale successfully created */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a product on a sale<br />Scope for public applications : write_sales */
    "api.sales.add_product": {
        parameters: {
            formData: {
                /** Sale ID */
                sale_id: number;
                /** Product ID */
                product_id: number;
                /** Size ID */
                size_id?: number;
                /** Quantity */
                quantity?: number;
                /** Unit product price */
                product_price?: string;
                /** Product points earned / used */
                product_points?: string;
                /** Product stock_withdrawal 0 OR 1 (default : 0) */
                stock_withdrawal?: string;
                /** Product comments */
                product_comments?: string;
                /** Product serial number */
                serial_number?: string;
                /** Kitchen position from 0 to 5 (default : 1) */
                kitchen_pos?: string;
            };
        };
        responses: {
            /** Product successfully added */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a credit note on a sale<br />Scope for public applications : write_sales */
    "api.sales.add_credit_note": {
        parameters: {
            formData: {
                /** Sale ID */
                sale_id: number;
                /** Credit note code */
                credit_note_code: number;
            };
        };
        responses: {
            /** Credit note successfully added */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Close a sale<br />Scope for public applications : write_sales */
    "api.sales.close": {
        parameters: {
            formData: {
                /** Sale ID */
                sale_id: number;
            };
        };
        responses: {
            /** Sale successfully closed */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a DIV payment to a sale<br />Scope for public applications : write_sales */
    "api.sales.payment_div": {
        parameters: {
            formData: {
                /** Sale ID */
                sale_id: number;
                /** Payment type */
                payment_type: string;
                /** Amount */
                payment_amount: string;
                /** Date payment */
                payment_date?: string;
            };
        };
        responses: {
            /** Payment successfully added */
            200: unknown;
            /** Unauthorized action */
            401: unknown;
            /** Server Error */
            500: unknown;
        };
    };
    /** Update a DIV payment<br />Scope for public applications : write_sales */
    "api.sale.payment_div.update": {
        parameters: {
            path: {
                /** payment_detail_id */
                payment_detail_id: number;
            };
            formData: {
                /** One of the following DIV payment attribute : payment_date (format YYYY-MM-DD), payment_date_paid (format YYYY-MM-DD), comments */
                payment_div_attribute: "payment_date" | "payment_date_paid" | "comments";
                /** New value for the DIV payment attribute */
                new_value?: string;
            };
        };
        responses: {
            /** DIV payment successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete DIV payment<br />Scope for public applications : write_sales */
    "api.sales.payment_div.delete": {
        parameters: {
            path: {
                /** payment_detail_id to delete */
                payment_detail_id: number;
            };
        };
        responses: {
            /** DIV payment successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Update a sale attribute<br />Scope for public applications : write_sales */
    "api.sale.update": {
        parameters: {
            path: {
                /** sale_id */
                sale_id: number;
            };
            formData: {
                /** One of the following sale attribute : vendor_id, customer_id, billing_address, shipping_address, payment, ext_ref, store_id, takeaway, ressource_id, currency, pickup_date, guests_number */
                sale_attribute: "vendor_id" | "customer_id" | "billing_address" | "shipping_address" | "payment" | "ext_ref" | "store_id" | "takeaway" | "ressource_id" | "currency" | "pickup_date" | "guests_number";
                /** New value for the sale attribute */
                new_value?: string;
            };
        };
        responses: {
            /** Sale attribute successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete sale. Sale must be empty and should not have any CREDIT like payments.<br />Scope for public applications : write_sales */
    "api.sales.delete": {
        parameters: {
            path: {
                /** sale_id to delete */
                sale_id: number;
            };
        };
        responses: {
            /** Sale successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns details of a line_item_id<br />Scope for public applications : read_sales */
    "api.sales.line_item_id": {
        parameters: {
            path: {
                /** line_item_id */
                line_item_id: number;
            };
        };
        responses: {
            /** line_item_id details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete line_item<br />Scope for public applications : write_sales */
    "api.sale_line_item.delete": {
        parameters: {
            path: {
                /** line_item_id */
                line_item_id: number;
            };
        };
        responses: {
            /** Line_item successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Update a line_item attribute<br />Scope for public applications : write_sales */
    "api.sale_line_item.update": {
        parameters: {
            path: {
                /** line_item_id */
                line_item_id: number;
            };
            formData: {
                /** One of the following line_item attribute : points, product_comments, serial_number, stock_withdrawal, product_price, vat, quantity, discount, product_supply_price */
                line_item_attribute: "points" | "product_comments" | "serial_number" | "stock_withdrawal" | "product_price" | "vat" | "quantity" | "discount" | "product_supply_price";
                /** New value for the line_item attribute */
                new_value?: string;
            };
        };
        responses: {
            /** Line item attribute successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns details of a sale<br />Scope for public applications : read_sales */
    "api.sales.sale_id": {
        parameters: {
            path: {
                /** sale_id */
                sale_id: number;
            };
        };
        responses: {
            /** Sale details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns closed sales in a store_id for a specific day or month<br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.closed_sales.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Closed sales */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns closed sales for a specific tag_id in a store_id for a specific day or month<br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.closed_sales_by_tag.index": {
        parameters: {
            path: {
                /** tag_id */
                tag_id: number;
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Closed sales */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns open sales in a store_id (ORDER BY sale_id DESC)<br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.open_sales.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
            };
            query: {
                /** Order by */
                order_by?: "sale_id" | "created_at" | "vendor_id" | "customer_id" | "resource_id" | "guests_number" | "pickup_date" | "total";
                /** Sort */
                sort?: "DESC" | "ASC";
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Open sales */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a modifier to a line_item<br />Scope for public applications : write_sales */
    "api.sale_line_item_modifier.add": {
        parameters: {
            path: {
                /** line_item_id */
                line_item_id: number;
                /** modifier_id */
                modifier_id: number;
            };
        };
        responses: {
            /** Line item modifier successfully added */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete a modifier on a line_item<br />Scope for public applications : write_sales */
    "api.sale_line_item_modifier.delete": {
        parameters: {
            path: {
                /** line_item_id */
                line_item_id: number;
                /** modifier_id */
                modifier_id: number;
            };
        };
        responses: {
            /** Line item modifier successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Exchange a line_item<br />Scope for public applications : write_sales */
    "api.sale_line_item.exchange": {
        parameters: {
            path: {
                /** line_item_id */
                line_item_id: number;
                /** stock_id on which the product should be restocked. 0 to restock the product in it's original stock. otherwise a transfer will be created */
                stock_id: number;
            };
        };
        responses: {
            /** Line item attribute successfully exchanhed */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Global discount<br />Scope for public applications : write_sales */
    "api.add_global_discount": {
        parameters: {
            formData: {
                /** sale_id */
                sale_id: number;
                /** discount type 1 (absolute) | 2 (relative) */
                type: number;
                /** discount amount */
                amount: number;
            };
        };
        responses: {
            /** Global discount applied */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add an open package on a sale<br />Scope for public applications : write_sales */
    "api.sales.add_open_package": {
        parameters: {
            formData: {
                /** Sale ID */
                sale_id: number;
                /** Product ID */
                product_id: number;
                /** Product comments */
                product_comments?: string;
                /** Kitchen position from 0 to 5 (default : 1) */
                kitchen_pos?: string;
            };
        };
        responses: {
            /** Open package successfully added */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Pack a product in an open package<br />Scope for public applications : write_sales */
    "api.open_package.pack": {
        parameters: {
            path: {
                /** Line item ID of the open package */
                pack_line_item_id: number;
                /** Line item ID of the product you want to pack */
                product_line_item_id: string;
            };
        };
        responses: {
            /** Line item successfully packed */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Unpack a line item id (either a product or an open package)<br />Scope for public applications : write_sales */
    "api.open_package.unpack": {
        parameters: {
            path: {
                /** Line item ID to unpack */
                line_item_id: number;
            };
        };
        responses: {
            /** Line item successfully unpacked */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete an open package (must be completely unpacked)<br />Scope for public applications : write_sales */
    "api.open_package.delete": {
        parameters: {
            path: {
                /** line_item_id */
                line_item_id: number;
            };
        };
        responses: {
            /** Line_item successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns tags for sales<br />Scope for public applications : read_sales */
    "api.tags.sales": {
        responses: {
            /** Tags */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns tags for a specific sale_id<br />Scope for public applications : read_sales */
    "api.tags.sale_id": {
        parameters: {
            path: {
                /** Sale ID */
                sale_id: number;
            };
        };
        responses: {
            /** Sale tags */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a tag to a specific sale_id<br />Scope for public applications : write_sales */
    "api.sales_tags.add": {
        parameters: {
            path: {
                /** Sale ID for which you need to add a tag ID */
                sale_id: number;
            };
            formData: {
                /** Tag ID that needs to be added */
                tag_id: number;
            };
        };
        responses: {
            /** Tag successfully added */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete a tag to a specific sale_id<br />Scope for public applications : write_sales */
    "api.sales_tags.delete": {
        parameters: {
            path: {
                /** Sale ID for which you need to delete a tag ID */
                sale_id: number;
                /** Tag ID that needs to be deleted. 0 to delete all tags */
                tag_id: number;
            };
        };
        responses: {
            /** Tag successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Search for customers that match a supplied query<br />Scope for public applications : read_customers<br />Results per page : 250 */
    "api.search.customers.index": {
        parameters: {
            query: {
                /** last_name */
                last_name?: string;
                /** first_name */
                first_name?: string;
                /** email */
                email?: string;
                /** phone */
                phone?: string;
                /** vat */
                vat?: string;
                /** country */
                country?: string;
                /** date_of_birth */
                date_of_birth?: string;
                /** validity | format : YYYY-MM-DD equal by default, if you need > (or <, or <=, or >=) send >YYYY-MM-DD for example */
                validity?: string;
                /** customers_code */
                customers_code?: string;
                /** customers_ref_ext */
                customers_ref_ext?: string;
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Customers */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns customers search results by tag_id<br />Scope for public applications : read_customers<br />Results per page : 250 */
    "api.customers.tag_id.search": {
        parameters: {
            path: {
                /** Tag ID */
                tag_id: number;
            };
            query: {
                /** Order by */
                order_by?: "customers_id" | "last_name" | "country" | "date_of_birth" | "validity" | "customers_code";
                /** Sort */
                sort?: "DESC" | "ASC";
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Customers details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Search for stock_transfer that match a supplied query<br />Scope for public applications : read_inventory<br />Results per page : 250 */
    "api.search.stock_transfer.index": {
        parameters: {
            query: {
                /** Date format : YYYY-MM-DD or YYYY-MM or YYYY */
                date?: string;
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Stock transfer */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Search for products that match a supplied query<br />Scope for public applications : read_products<br />Results per page : 250 */
    "api.search.products.index": {
        parameters: {
            query: {
                /** product_model */
                product_model?: string;
                /** Product category (int category_id) */
                product_category?: number;
                /** Product brand (int brand_id) */
                product_brand?: number;
                /** product_supplier (int supplier_id) */
                product_supplier?: number;
                /** product_arch (1 OR 0 OR null) */
                product_arch?: number;
                /** product_stock_management (1 OR 0 OR null) */
                product_stock_management?: number;
                /** product_supplier_reference */
                product_supplier_reference?: string;
                /** product_vat */
                product_vat?: number;
                /** products_ref_ext */
                products_ref_ext?: string;
                /** accounting_account */
                accounting_account?: string;
                /** product_package */
                product_package?: string;
                /** product_display_www */
                product_display_www?: string;
                /** Order by */
                order_by?: "product_id" | "product_model" | "product_price" | "product_supply_price" | "product_size_type" | "product_display" | "product_display_www" | "product_arch" | "updated_at" | "product_order";
                /** Sort */
                sort?: "DESC" | "ASC";
                /** Page number */
                p?: number;
            };
        };
        responses: {
            /** Products */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns sales search results by ext_ref<br />Scope for public applications : read_sales<br />Results per page : 250 */
    "api.sales.ext_ref.search": {
        parameters: {
            path: {
                /** Search value */
                q: string;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Sales details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Post a new message<br />Scope for public applications : read_customers */
    "api.shoutbox.add": {
        parameters: {
            formData: {
                /** Store ID : 0 is message is visible for all the stores */
                store_id: number;
                /** message */
                message?: string;
            };
        };
        responses: {
            /** Message successfully added */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns variants for a specific variant type ID<br />Scope for public applications : read_products */
    "api.sizes.stock_id": {
        parameters: {
            path: {
                /** ID of the size type */
                size_type_id: number;
            };
        };
        responses: {
            /** Returns different sizes for a defined size type ID */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Create a new size<br />Scope for public applications : write_products */
    "api.sizes.add": {
        parameters: {
            formData: {
                /** Size type id */
                size_type_id: string;
                /** Size name */
                size_name: string;
                /** External reference */
                size_ref_ext?: string;
            };
        };
        responses: {
            /** Size successfully added */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns variant types by ID<br />Scope for public applications : read_products */
    "api.size_types.id": {
        responses: {
            /** Size types by ID */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Create a new size type<br />Scope for public applications : write_products */
    "api.size_types.add": {
        parameters: {
            formData: {
                /** Size type name */
                size_type_name: string;
                /** External reference */
                size_type_ref_ext?: string;
            };
        };
        responses: {
            /** Size type successfully added */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns variant types by ID - Pretty<br />Scope for public applications : read_products */
    "api.sizes_pretty.stock_id": {
        responses: {
            /** Returns different sizes */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns specific rules for sizes<br />Scope for public applications : read_products<br />Results per page : 250 */
    "api.sizes_specific_rules.id": {
        parameters: {
            query: {
                /** Page number */
                p?: number;
            };
        };
        responses: {
            /** Size specific rules */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns sales total for store_id for a specific day or month <br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.stats.turnover.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** Sales total report */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns sales for a specific product id<br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.stats.product.index": {
        parameters: {
            path: {
                /** product_id */
                product_id: number;
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** Sales total report */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns sales total for store_id for a specific month by products tags<br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.stats.products_tags.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** Sales total report */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns sales for a specific tag_id<br />Scope for public applications : read_reports<br />Results per page : 250<br />The only mandatoty parameter is store_id */
    "api.stats.sales_by_tag.index": {
        parameters: {
            path: {
                /** tag_id */
                tag_id: number;
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** Sales total report */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns product sold for store_id for a specific month<br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.stats.products.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Report of products solds */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns sales by category for store_id for a specific month <br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.stats.categories.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
            };
        };
        responses: {
            /** Sales by category report */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns sales by brand for store_id for a specific month<br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.stats.brands.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
            };
        };
        responses: {
            /** Sales by brand report */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns sales by supplier for store_id for a specific month<br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.stats.suppliers.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
            };
        };
        responses: {
            /** Sales by supplier report */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns number of sales by customer for store_id for a specific day or month<br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.stats.sales_per_customer.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** Number of sales by customer report */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Refresh supply prices of sold products based on a First In First Out (FIFO) calculation method<br />Scope for public applications : read_reports */
    "api.stats.refresh_supply_prices": {
        responses: {
            /** Refresh supply prices of sold products based on a First In First Out (FIFO) calculation method */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Refresh customers data (last order date, turnover, loyalty points etc...)<br />Scope for public applications : read_reports */
    "api.stats.refresh_customers": {
        responses: {
            /** Customers data successfully refreshed */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Refresh stats<br />Scope for public applications : read_reports */
    "api.stats.refresh_stats": {
        parameters: {
            path: {
                /** Year */
                year: number;
                /** Month */
                month: number;
            };
        };
        responses: {
            /** Refresh stats */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns stock available for a specific warehouse_id<br />Scope for public applications : read_inventory */
    "api.stock_available.stock_id": {
        parameters: {
            path: {
                /** ID of the warehouse */
                warehouse_id: number;
            };
            query: {
                /** Product category (int category_id) */
                product_category?: number;
                /** Product brand (int brand_id) */
                product_brand?: number;
                /** product_supplier (int supplier_id) */
                product_supplier?: number;
                /** product_arch (1 OR 0 OR null) */
                product_arch?: number;
                /** product_stock_management (1 OR 0 OR null) */
                product_stock_management?: number;
                /** product_supplier_reference */
                product_supplier_reference?: string;
                /** product_vat */
                product_vat?: number;
                /** products_ref_ext */
                products_ref_ext?: string;
                /** accounting_account */
                accounting_account?: string;
                /** product_display_www */
                product_display_www?: string;
            };
        };
        responses: {
            /** Stock available overview for a defined warehouse_id */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns stock available for all warehouses<br />Scope for public applications : read_inventory */
    "api.stock_available.all_wh": {
        parameters: {
            query: {
                /** Product category (int category_id) */
                product_category?: number;
                /** Product brand (int brand_id) */
                product_brand?: number;
                /** product_supplier (int supplier_id) */
                product_supplier?: number;
                /** product_arch (1 OR 0 OR null) */
                product_arch?: number;
                /** product_stock_management (1 OR 0 OR null) */
                product_stock_management?: number;
                /** product_supplier_reference */
                product_supplier_reference?: string;
                /** product_vat */
                product_vat?: number;
                /** products_ref_ext */
                products_ref_ext?: string;
                /** accounting_account */
                accounting_account?: string;
                /** product_display_www */
                product_display_www?: string;
            };
        };
        responses: {
            /** Stock available overview for all warehouses */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns stock available for a specific product_id<br />Scope for public applications : read_inventory */
    "api.stock_available.product_id": {
        parameters: {
            path: {
                /** ID of the product */
                product_id: number;
            };
        };
        responses: {
            /** Stock available overview for a defined ID product */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns stock available for a specific product_id and size_id<br />Scope for public applications : read_inventory */
    "api.stock_available.product_id_size": {
        parameters: {
            path: {
                /** ID of the product */
                product_id: number;
                /** Size ID of the product */
                product_size: number;
            };
        };
        responses: {
            /** Stock available overview for a defined ID product and size ID */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns serial numbers available for a specific product_id and size_id<br />Scope for public applications : read_inventory<br />Results per page : 250 */
    "api.stock_available.by_sn": {
        parameters: {
            path: {
                /** ID of the product */
                product_id: number;
                /** Size ID of the product */
                product_size: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Serial numbers available overview for a defined ID product and size ID */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Set product stock alert<br />Scope for public applications : write_inventory */
    "api.stock_available.set_alert": {
        parameters: {
            formData: {
                /** warehouse_id */
                warehouse_id: number;
                /** product_id */
                product_id: number;
                /** product_size. If none, 0 */
                product_size?: number;
                /** New value for the stock alert. If none, 0 */
                alert?: number;
            };
        };
        responses: {
            /** Alert successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Reset stock alerts for all products for all warehouses<br />Scope for public applications : write_inventory */
    "api.stock_available.reset_stock_alert": {
        responses: {
            /** Stock alerts successfully reseted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns stock orders for a specific warehouse_i<br />Scope for public applications : read_inventory<br />Results per page : 250 */
    "api.inventory_inputs.warehouse_id": {
        parameters: {
            path: {
                /** ID of the warehouse */
                warehouse_id: number;
            };
        };
        responses: {
            /** Iventory inputs overview for a defined warehouse_id */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Set/Modify a counted quantity for a product<br />Scope for public applications : write_inventory */
    "api.inventory_counts.add": {
        parameters: {
            formData: {
                /** Product ID */
                product_id: string;
                /** Product size */
                product_size?: string;
                /** Warehouse ID */
                warehouse_id: string;
                /** New quantity */
                quantity: string;
            };
        };
        responses: {
            /** Product successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Close an inventory count (stock-take)<br />Scope for public applications : write_inventory */
    "api.inventory_counts.close": {
        parameters: {
            formData: {
                /** Warehouse ID */
                warehouse_id: string;
            };
        };
        responses: {
            /** Inventory successfully closed */
            200: unknown;
            /** Client error */
            400: unknown;
            /** Unauthorized action */
            401: unknown;
            /** Server error */
            500: unknown;
        };
    };
    /** Returns sales linked to inventory counts for a specific month<br />Scope for public applications : read_inventory */
    "api.inventory_counts.sales.index": {
        parameters: {
            path: {
                /** warehouse_id */
                warehouse_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
            };
        };
        responses: {
            /** Payment types */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns stock orders linked to inventory counts for a specific month<br />Scope for public applications : read_inventory */
    "api.inventory_counts.stock_orders.index": {
        parameters: {
            path: {
                /** warehouse_id */
                warehouse_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
            };
        };
        responses: {
            /** Payment types */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns stock transfers<br />Scope for public applications : read_inventory<br />Results per page : 250 */
    "api.stock_transfer.index": {
        parameters: {
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Stock transfers */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Create a stock transfer<br />Scope for public applications : write_inventory */
    "api.stock_transfer.add": {
        parameters: {
            formData: {
                /** From stock ID */
                from_stock_id: number;
                /** To stock ID */
                to_stock_id: number;
                /** Stock transfer label */
                label?: string;
            };
        };
        responses: {
            /** Stock transfer successfully created */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns details of a stock transfer<br />Scope for public applications : read_inventory */
    "api.stock_transfer_info.index": {
        parameters: {
            path: {
                /** transfer_id */
                transfer_id: number;
            };
        };
        responses: {
            /** Stock transfer details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Validate a stock transfer<br />Scope for public applications : write_inventory */
    "api.stock_transfer_validate.add": {
        parameters: {
            formData: {
                /** Stock transfer ID */
                transfer_id: number;
            };
        };
        responses: {
            /** Stock transfer successfully validated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns details of a stock transfer<br />Scope for public applications : read_inventory */
    "api.stock_transfer_details.index": {
        parameters: {
            path: {
                /** Stock transfer ID */
                transfer_id: number;
            };
        };
        responses: {
            /** Stock transfer details */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a product to a specific transfer_id<br />Scope for public applications : write_inventory */
    "api.stock_transfer_details.add_product": {
        parameters: {
            path: {
                /** Stock transfer ID */
                transfer_id: number;
            };
            formData: {
                /** Product ID you need to add to the stock transfer */
                product_id: number;
                /** Product size you need to add to the stock transfer */
                product_size: number;
                /** Quantity (if empty value is 1) */
                quantity: number;
            };
        };
        responses: {
            /** Customer successfully added */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete a stock_transfer_detail_id<br />Scope for public applications : write_inventory */
    "api.stock_transfer_details.delete": {
        parameters: {
            path: {
                /** stock_transfer_detail_id */
                stock_transfer_detail_id: number;
            };
        };
        responses: {
            /** Stock transfert detail ID successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns the list of stock transfer details on hold<br />Scope for public applications : read_inventory<br />Results per page : 250 */
    "api.stock_transfer_details_on_hold.index": {
        parameters: {
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** Stock transfert details on hold */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns stores by ID<br />Scope for public applications : read_settings */
    "api.stores.index": {
        responses: {
            /** Stores overview */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns subscriptions<br />Scope for public applications : read_settings */
    "api.subscriptions.get": {
        responses: {
            /** Subscriptions */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns suppliers by ID<br />Scope for public applications : read products */
    "api.suppliers.index": {
        responses: {
            /** Suppliers overview */
            200: {
                schema: definitions["suppliers"];
            };
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Update a supplier<br />Scope for public applications : write_products */
    "api.suppliers.update": {
        parameters: {
            formData: {
                /** ID of the supplier that needs to be updated */
                supplier_id: number;
                /** One of the following supplier attribute : supplier_name, supplier_enabled, supplier_position, supplier_contact, supplier_email, supplier_url, supplier_address, supplier_ref_ext */
                supplier_attribute: "supplier_name" | "supplier_enabled" | "supplier_position" | "supplier_contact" | "supplier_email" | "supplier_url" | "supplier_address" | "supplier_ref_ext";
                /** New value for the supplier attribute */
                new_value?: string;
            };
        };
        responses: {
            /** Supplier successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Create a new supplier<br />Scope for public applications : write_products */
    "api.suppliers.add": {
        parameters: {
            formData: {
                /** Name of the supplier that needs to be added */
                supplier_name?: string;
                /** External reference */
                supplier_ref_ext?: string;
            };
        };
        responses: {
            /** Customers address successfully added */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Delete a supplier. All products with the deleted supplier will loose the information. Same for statistics for this supplier.<br />Scope for public applications : write_products */
    "api.suppliers.delete": {
        parameters: {
            path: {
                /** ID of the supplier that needs to be deleted */
                supplier_id: number;
            };
        };
        responses: {
            /** Supplier successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns taxes by ID<br />Scope for public applications : read_settings */
    "api.taxes.index": {
        responses: {
            /** Taxes overview */
            200: {
                schema: definitions["taxes"];
            };
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns cash movements for a store_id for a specific month<br />Scope for public applications : read_reports */
    "api.till.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
            };
        };
        responses: {
            /** Till operations */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add cash to your till (aside from your sales payments) such as your cash float or additional money<br />Scope for public applications : write_reports */
    "api.till.cash_in": {
        parameters: {
            formData: {
                /** store_id */
                store_id: string;
                /** Amount */
                amount: string;
                /** Currency. ISO 4217 currency code https://en.wikipedia.org/wiki/ISO_4217#Active_codes */
                currency_code: string;
                /** Comments */
                comments?: string;
            };
        };
        responses: {
            /** Cash successfully added */
            200: unknown;
            /** Unauthorized action */
            401: unknown;
            /** Server Error */
            500: unknown;
        };
    };
    /** Remove cash from your till (aside from change on cash payments) such as safe drops or store expenses<br />Scope for public applications : write_reports */
    "api.till.cash_out": {
        parameters: {
            formData: {
                /** store_id */
                store_id: string;
                /** Amount */
                amount: string;
                /** Currency. ISO 4217 currency code https://en.wikipedia.org/wiki/ISO_4217#Active_codes */
                currency_code: string;
                /** Comments */
                comments?: string;
            };
        };
        responses: {
            /** Cash successfully removed */
            200: unknown;
            /** Unauthorized action */
            401: unknown;
            /** Server Error */
            500: unknown;
        };
    };
    /** Check in a unique card_id<br />Scope for public applications : write_time_tracking */
    "api.time_tracking.check_in": {
        parameters: {
            formData: {
                /** store_id */
                store_id: string;
                /** customers_id */
                customers_id: string;
                /** Card ID */
                card_id: string;
            };
        };
        responses: {
            /** Time tracking successfully added */
            201: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Check out a unique card_id<br />Scope for public applications : write_time_tracking */
    "api.time_tracking.check_out": {
        parameters: {
            formData: {
                /** store_id */
                store_id: string;
                /** Card ID */
                card_id: string;
            };
        };
        responses: {
            /** Check out OK */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns time_tracking_id details<br />Scope for public applications : read_time_tracking */
    "api.time_tracking.index": {
        parameters: {
            path: {
                /** time_tracking_id */
                time_tracking_id: number;
            };
        };
        responses: {
            /** time_tracking overview */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Update a time_tracking id<br />Scope for public applications : write_time_tracking */
    "api.time_tracking.update": {
        parameters: {
            path: {
                /** time_tracking_id */
                time_tracking_id: number;
            };
            formData: {
                /** One of the following time_tracking_attribute : sale_id, hide_time_tracking (0|1), customer_id, start, end */
                time_tracking_attribute: string;
                /** New value for the time_tracking attribute */
                new_value?: string;
            };
        };
        responses: {
            /** time_tracking id successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns time_tracking details for store_id for a specific day<br />Scope for public applications : read_time_tracking */
    "api.time_tracking_date.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** time_tracking overview for store_id for a specific day */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns time_tracking_id details for a given sale_id<br />Scope for public applications : read_time_tracking */
    "api.time_tracking_sale.index": {
        parameters: {
            path: {
                /** sale_id */
                sale_id: number;
            };
        };
        responses: {
            /** time_tracking overview */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns time_tracking for a specific customer_id<br />Scope for public applications : read_time_tracking */
    "api.customers_time_tracking.index": {
        parameters: {
            path: {
                /** customer_id */
                customer_id: number;
            };
            query: {
                /** Page number */
                p?: string;
            };
        };
        responses: {
            /** time_tracking overview */
            200: unknown;
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns users by ID<br />Scope for public applications : no access */
    "api.users.index": {
        responses: {
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Update a user's password<br />Scope for public applications : no access */
    "api.user.update_password": {
        parameters: {
            formData: {
                /** ID of the user that needs to be updated */
                user_id: number;
                /** New password */
                new_password?: string;
            };
        };
        responses: {
            /** User's password successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns warehouses by ID<br />Scope for public applications : read_settings */
    "api.warehouses.index": {
        responses: {
            /** Warehouses overview */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns webhooks<br />Scope for public applications : none */
    "api.webhooks.get": {
        responses: {
            /** Webhooks */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Add a webhook<br />Scope for public applications : none */
    "api.webhooks.add": {
        parameters: {
            formData: {
                /** The text that will appear to the merchant. It should be task oriented, and not just the name of your app. */
                webhook_label: string;
                /** The URL where your app is hosted, or a specific URL for this task. If your url is non valid or if it drops an error, your action will be blocked */
                webhook_url: string;
                /** The event type that should initiate the webhook : close sale, update/create product, add/delete payment, add/update stock_order, update/create customer, start/end timestamp, schedule, add/delete product in a sale sale_item, store_credit, validate stock transfer, line_item_exchange, sale_creation, sale_deletion */
                webhook_action: "sale" | "product" | "payment" | "stock_order" | "customer" | "timestamp" | "schedule" | "sale_item" | "store_credit" | "stock_transfer" | "line_item_exchange" | "sale_creation" | "sale_deletion";
                /** The unique webhook id if used by an app (if already exists, it will be replaced). Max 80 chars. */
                webhook_app_id_int?: string;
                /** The store id where the webhook should be executed. If value is 0, the webhook will be executed in every store. If empty, default value is 0. */
                webhook_store_id?: number;
                /** The user id for wich the webhook should be executed. If value is 0, the webhook will be executed for all users. If empty, default value is 0 */
                webhook_user_id?: number;
                /** If the webhook is asynchronous. This is usefull if your endpont might be long to respond (more than 4 seconds) or if you have many webhooks for the same action. If empty, default value is 0 */
                webhook_async?: number;
            };
        };
        responses: {
            /** Webhook successfully added */
            200: unknown;
            /** Unauthorized action */
            401: unknown;
            /** Server Error */
            500: unknown;
        };
    };
    /** Delete a webhook<br />Scope for public applications : none */
    "api.webhooks.delete": {
        parameters: {
            path: {
                /** webhook_id to delete */
                webhook_id: number;
            };
        };
        responses: {
            /** Webhook successfully deleted */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not found - the resource does not exist */
            404: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns sales payments for store_id for a specific day<br />Scope for public applications : read_reports */
    "api.z.payment_types.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** End-of-day report by payment types */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns payments received for store_id for a specific day<br />Scope for public applications : read_reports */
    "api.z.payments_received.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** End-of-day report by payments received */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns customers credit deposits for store_id for a specific day<br />Scope for public applications : read_reports */
    "api.z.customers_credit_deposits.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** End-of-day report by customers credit deposits */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns customers sales for store_id for a specific day<br />Scope for public applications : read_reports */
    "api.z.customers.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** End-of-day report by customers sales */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns sales taxes for store_id for a specific day<br />Scope for public applications : read_reports */
    "api.z.taxes.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** End-of-day report by taxes */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns categories statistics for store_id for a specific day<br />Scope for public applications : read_reports */
    "api.z.categories.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** End-of-day report by categories */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns accounting_accounts statistics for store_id for a specific day<br />Scope for public applications : read_reports */
    "api.z.accounting_accounts.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** End-of-day report by accouting accounts */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Update the end-of-day date for a sale_id<br />Scope for public applications : write_reports */
    "api.z.update_date_z": {
        parameters: {
            formData: {
                /** Sale ID */
                sale_id: string;
                /** Date Z | format : YYYY-MM-DD */
                date_z: string;
            };
        };
        responses: {
            /** date_z successfully updated */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Not Acceptable - wrong 'Content-type'; accepted: 'application/x-www-form-urlencoded', 'application/json' */
            406: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Close the day and previous days<br />Scope for public applications : forbidden */
    "api.z.closure.add": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** End-of-day report by taxes */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
    /** Returns cash book movements for store_id for a specific day or month <br />Scope for public applications : read_reports<br />Results per page : 250 */
    "api.z.cash_book.index": {
        parameters: {
            path: {
                /** store_id */
                store_id: number;
                /** Year */
                year: number;
                /** Month */
                month: number;
                /** Day */
                day: number;
            };
        };
        responses: {
            /** Cash book movements report */
            200: unknown;
            /** Unauthorized - invalid authentication */
            401: {
                schema: definitions["error"];
            };
            /** Forbidden - insufficient user rights */
            403: {
                schema: definitions["error"];
            };
            /** Unprocessable entity - an error was encountered when parsing the data */
            422: {
                schema: definitions["error"];
            };
            /** Internal server error */
            500: {
                schema: definitions["error"];
            };
        };
    };
}
export interface external {
}
